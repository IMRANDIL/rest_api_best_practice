Architecture....


Here we'll be using Express.js for our API. working on 3 layer......

1...Router....

2...Controller....

3...Service layer....


4...Data Access Layer...


Inside the Controller we'll be handling all stuff that is related to HTTP. That means we're dealing with requests and responses for our endpoints. Above that layer is also a little Router from Express that passes requests to the corresponding controller....


//The whole buiness logic will be in the service layer that exports certain services(methods) which are used by the controller...



//The third layer is the Data Access Layer where we'll be working with our Database...We'll be exporting some methods for certain database operations like creating WOD that can be used by our Service Layer...






//Versioning......

//Wait a second, Before we  write any API-specific code we should be aware of versioning. LIke in other applications there will be improvements, new features, and stuff like that. So it is important to version our API as well...



//The big advantage is that we can work on new features or improvements on a new Version while the clients are still using the current version and are affected by breaking changes...



//One good practice is tot add a path segment like  v1 or v2 into the URL....


//Version 1....

/api/v1/workouts


//version 2....

/api/v2/workouts...



//That's what we expose to the outside world and what can be consumed by other developers. But we also need to structure our  project in order to differentiaate between each version...


//There are many different approaches to handling versioning inside an express API. In our case I'd like to create a sub folder for each version inside our src directory called v1....



//Name Resources in Plural.....


After setting it all up we can now dive into the real implementation of our API...LIke I said, I'd like to start with our fundaamental CRUD endpoints...



//In other words, let's start implementing endpoints for creating, reading, updating and deleting workoouts...



//First, let's hook up a specific controller, service, aand router for our workouts...




//we could name the cretion endpoint /api/v1/workout because we'd like to add one workout, right?...


Basically there's nothing wrong with that approach but this can lead to misunderstandings...



//Always remember...Your API is used by other humans and should be precise....this goes also for naming your resources...



//box is a collection that stores different workouts...



//Naming your resources in plural has the big advantage thaat it's crystal cleaar to other humans, that is a collection that consists of different workouts...






//So, let's define our endpoints inside our workout router....



Accept and respond with data in JSON format....


//When interacting with an API, you always send specific data with your 

request or you receive data with the response..There are many different 

data formats but JSON is a standardized format...


//Although there's the term JavaScript in JSON>>..it is not tied to it specifically...



//You can also write your API with Java or Python that can handle JSON as well...



//Because of its standardization, API's should accept and respond with data in JSON format...


//our business logic goes in service layer....

so create service layer now...

//it is a good practice to name the service methods the same as the controller methods so that you have a connection between those...


//At the moment nothing should have changed inside our responses..But under the hood our controller laaayer talks now with our service laayer...


//Inside our service methods we'll be handling our business logic like transforming data structures and communicating with our database layer...


//To do that, we need a database and a collection of methods that acutally handle the database interaction. OUr database will be a simple JSON file that is pre-filled with some workouts already..


As you can see there are three workouts inserted. One workout consists of an id, name, equipment, exercise, createdAt, updatedAt, and trainerTips...


Let's start with the simplest one and return all workouts thaat are stored and start with implementing the corresponding method inside our Dataa Acess layer....


To be able to parse the sent JSON inside the request body, we need to install body-parser first and configure it...

//Now we're able to receive the JSON data inside our controller under req.body...


//In order to test it properly, just open your favorite HTTP client ....create a post request to localhost:5000/api/v1/workouts and a req.body in JSON format like this...


As you've might noticed, there are some properties missing like "id", "createdAt" and "updatedAt"....That's the job of our API to add those properties before inserting it...We'll take care of it inside our workout service later...


//Inside the method createNewWorkout in our workout controller, we can extract the body from the request object, do some validation, and pass it as an argument to our workout service...


